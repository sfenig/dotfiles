execute pathogen#infect()
set nocompatible
filetype off
syntax enable
set mouse=""

" Set , to be leader key
let mapleader = ","

set background=dark
"colorscheme solarized
set guifont=AndaleMono:h14
set guioptions-=T
set hlsearch
set backspace=2

set clipboard=unnamedplus

" Dont ask to re-read files changed outside vim
set autoread

set rnu "relative line numbers
set number "set line number"

" toggle red line at 101st character to keep lines under 80 chars
function! g:ToggleRedline()
 if(&colorcolumn == 101)
   set colorcolumn=0
 else
   set colorcolumn=101
 endif
endfunc
nnoremap <leader>l :call g:ToggleRedline()<cr>
let g:ruby_debugger_progname = 'mvim'

" My Bundles here:
"
" original repos on github
" Bundle 'tpope/vim-surround'
" Bundle 'tpope/vim-unimpaired'
" Bundle 'tpope/vim-repeat'
" Bundle 'tpope/vim-rails'
" Bundle 'Rename'
" Bundle 'thoughtbot/vim-rspec'

filetype plugin indent on
set ignorecase

" Configure go tests 
let s:last_go_run = ""

function! g:CurrentGoSuiteTest()
  let s:last_go_run = "-test.timeout 360s ./..."
  call g:LastGoFileTest()
endfunc
nnoremap <leader>rs :call g:CurrentGoSuiteTest()<CR><C-L>

function! g:CurrentGoFuncTest()
  let temp = system("~/testReducer -file " . expand("%") . " -line " . line("."))
  let s:last_go_run = substitute(temp, '\n', '', 'g')
  call g:LastGoFileTest()
endfunc
nnoremap <leader>rr :call g:CurrentGoFuncTest()<CR><C-L>

function! g:LastGoFileTest()
  :execute "! tmux send -t 0.2 'clear' Enter"
  :execute "! tmux send -t 0.2 'cd /app' Enter"
  :execute "! tmux send -t 0.2 'GIN_MODE=release go test -p 1 -failfast -count 1 " . s:last_go_run . "' Enter"
endfunc
nnoremap <leader>rl :call g:LastGoFileTest()<CR><C-L>

" New buffer at direction
nmap <leader>sh  :leftabove  vnew<CR>
nmap <leader>sl  :rightbelow vnew<CR>
nmap <leader>sk  :leftabove  new<CR>
nmap <leader>sj  :rightbelow new<CR>

" traverse splits
nnoremap <leader>wh <C-w>h
nnoremap <leader>wl <C-w>l
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k

" arrows resize splits
nnoremap <UP>    <C-w>+
nnoremap <DOWN>  <C-w>-
nnoremap <LEFT>  <C-w>>
nnoremap <RIGHT> <C-w><

" Ctrl-P settings
let g:ctrlp_max_files = 10000 
let g:ctrlp_max_height = 20
let g:ctrlp_max_depth = 40
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("k")':   ['<Tab>'],
    \ }
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

set wildignore+=*/tmp/*,node_modules
nnoremap <leader>y :tabe<CR>:CtrlP<CR>
nnoremap <leader>t :CtrlP<CR>

" Checktime reloads files editted outside vim (git)
nnoremap <leader>q :checktime

" Toggle line number Ctrl-N
nmap <C-N><C-N> :set invnumber<CR>

" command Wipetabs :%s/	/  /g

" Random Leader Commands
nnoremap <leader>W :Wipetabs
nnoremap <leader>a :tabe\|:Rg 
nnoremap <leader>g :Git
nnoremap <leader>4 :tabclose<CR>
nnoremap <leader>. :! 
nnoremap <leader>yd :YcmCompleter GoToDefinition<CR>


" Clear highlighting
map <C-h> :nohl<cr>

" Disable Ex mode, and capital K
map Q <Nop>
map K <Nop>

" Use space to toggle folds
nnoremap <space> za

" Press Shift+P while in visual mode to replace the selection without
" overwriting the default register
vmap P p :call setreg('"', getreg('0')) <CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

let g:jsx_ext_required = 0

" Set tab to 2 spaces
set expandtab
set shiftwidth=2 tabstop=2
au BufRead,BufNewFile *.thor set filetype=ruby
au BufRead,BufNewFile *.jbuilder set filetype=ruby
au BufRead,BufNewFile *.god set filetype=ruby
au BufRead,BufNewFile *.rabl set filetype=ruby
au BufRead,BufNewFile *.axlsx set filetype=ruby
au BufRead,BufNewFile *.hamljs set filetype=haml

" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact
autocmd Filetype python setlocal sw=4 ts=4 sts=4

" Populate args list with files in the quickfix window. Obtained from.. http://stackoverflow.com/questions/5686206/search-replace-using-quickfix-list-in-vim
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction

" Function for swapping splits. Obtained from.. http://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf 
endfunction

nmap <silent> <leader>mn :call MarkWindowSwap()<CR>
nmap <silent> <leader>ms :call DoWindowSwap()<CR>
""" END SWAPPING SPLITS """

" Configure vim-slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": ":0.2"}
"
" docker inotify workaround

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.css,*.json,*.md,*.yaml,*.html Prettier

let g:ackprg = "ack-grep --ignore-dir={log,public,results}"

let g:go_fmt_command = "goimports"
let g:go_def_mode = "gopls"
let g:go_info_mode = "gopls"

nmap =j :%!python -m json.tool<CR>

" dark red
hi tsxTagName guifg=#E06C75
hi tsxComponentName guifg=#E06C75
hi tsxCloseComponentName guifg=#E06C75

" orange
hi tsxCloseString guifg=#F99575
hi tsxCloseTag guifg=#F99575
hi tsxCloseTagName guifg=#F99575
hi tsxAttributeBraces guifg=#F99575
hi tsxEqual guifg=#F99575

" yellow
hi tsxAttrib guifg=#F8BD7F cterm=italic
